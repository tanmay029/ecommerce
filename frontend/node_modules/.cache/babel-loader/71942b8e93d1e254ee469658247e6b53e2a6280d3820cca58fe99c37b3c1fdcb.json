{"ast":null,"code":"// src/api/api.js\nimport axios from 'axios';\n\n/* ------------------------------------------------------------------\n   Global configuration\n   ------------------------------------------------------------------ */\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api'; // ðŸ‘ˆ  port 5001\n\n// Create a dedicated Axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  // every request will be prefixed with this URL  [web:80]\n  timeout: 10000,\n  // 10 s network timeout\n  withCredentials: true // allow cookies if the backend ever sets them\n});\n\n/* ------------------------------------------------------------------\n   Request interceptor â€“ automatically inject the JWT if present\n   ------------------------------------------------------------------ */\napi.interceptors.request.use(config => {\n  const userInfo = localStorage.getItem('userInfo');\n  if (userInfo) {\n    const {\n      token\n    } = JSON.parse(userInfo);\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n/* ------------------------------------------------------------------\n   Response interceptor â€“ centralised error handling\n   ------------------------------------------------------------------ */\napi.interceptors.response.use(response => response, error => {\n  const {\n    response\n  } = error;\n\n  // Handle 401 (expired / invalid token)\n  if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n    localStorage.removeItem('userInfo');\n    // Optional: you could use react-router navigation instead\n    window.location.href = '/login';\n  }\n\n  // In dev mode, surface backend error message in console\n  if (response) {\n    var _response$config$meth, _response$data;\n    console.error(`API ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url} â†’`, response.status, ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || response.statusText);\n  } else {\n    console.error('Network error or backend unreachable');\n  }\n  return Promise.reject(error);\n});\n\n/* ------------------------------------------------------------------\n   Typed API helpers\n   ------------------------------------------------------------------ */\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  getProfile: () => api.get('/auth/profile')\n};\nexport const productsAPI = {\n  getProducts: (params = {}) => api.get('/products', {\n    params\n  }),\n  getProduct: id => api.get(`/products/${id}`),\n  getFeaturedProducts: () => api.get('/products/featured/top'),\n  createProduct: productData => api.post('/products', productData),\n  updateProduct: (id, productData) => api.put(`/products/${id}`, productData),\n  deleteProduct: id => api.delete(`/products/${id}`)\n};\nexport const cartAPI = {\n  getCart: () => api.get('/cart'),\n  addToCart: cartData => api.post('/cart', cartData),\n  updateCartItem: (itemId, data) => api.put(`/cart/${itemId}`, data),\n  removeFromCart: itemId => api.delete(`/cart/${itemId}`)\n};\nexport const ordersAPI = {\n  createOrder: orderData => api.post('/orders', orderData),\n  getOrder: id => api.get(`/orders/${id}`),\n  getMyOrders: () => api.get('/orders/user/myorders'),\n  getAllOrders: () => api.get('/orders'),\n  updateOrderToPaid: (id, paymentResult) => api.put(`/orders/${id}/pay`, paymentResult)\n};\nexport const paymentAPI = {\n  createOrder: orderData => api.post('/payment/create-order', orderData),\n  verifyPayment: paymentData => api.post('/payment/verify-payment', paymentData)\n};\nexport const healthAPI = {\n  check: () => api.get('/health')\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","withCredentials","interceptors","request","use","config","userInfo","localStorage","getItem","token","JSON","parse","headers","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","_response$config$meth","_response$data","console","method","toUpperCase","url","data","message","statusText","authAPI","login","credentials","post","register","userData","getProfile","get","productsAPI","getProducts","params","getProduct","id","getFeaturedProducts","createProduct","productData","updateProduct","put","deleteProduct","delete","cartAPI","getCart","addToCart","cartData","updateCartItem","itemId","removeFromCart","ordersAPI","createOrder","orderData","getOrder","getMyOrders","getAllOrders","updateOrderToPaid","paymentResult","paymentAPI","verifyPayment","paymentData","healthAPI","check"],"sources":["/Users/tanmaykumar/Downloads/ecommerce/frontend/src/api/api.js"],"sourcesContent":["// src/api/api.js\nimport axios from 'axios';\n\n/* ------------------------------------------------------------------\n   Global configuration\n   ------------------------------------------------------------------ */\nconst API_URL =\n  process.env.REACT_APP_API_URL || 'http://localhost:5001/api'; // ðŸ‘ˆ  port 5001\n\n// Create a dedicated Axios instance\nconst api = axios.create({\n  baseURL: API_URL,          // every request will be prefixed with this URL  [web:80]\n  timeout: 10000,            // 10 s network timeout\n  withCredentials: true      // allow cookies if the backend ever sets them\n});\n\n/* ------------------------------------------------------------------\n   Request interceptor â€“ automatically inject the JWT if present\n   ------------------------------------------------------------------ */\napi.interceptors.request.use(\n  (config) => {\n    const userInfo = localStorage.getItem('userInfo');\n    if (userInfo) {\n      const { token } = JSON.parse(userInfo);\n      if (token) config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n/* ------------------------------------------------------------------\n   Response interceptor â€“ centralised error handling\n   ------------------------------------------------------------------ */\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const { response } = error;\n\n    // Handle 401 (expired / invalid token)\n    if (response?.status === 401) {\n      localStorage.removeItem('userInfo');\n      // Optional: you could use react-router navigation instead\n      window.location.href = '/login';\n    }\n\n    // In dev mode, surface backend error message in console\n    if (response) {\n      console.error(\n        `API ${response.config.method?.toUpperCase()} ${response.config.url} â†’`,\n        response.status,\n        response.data?.message || response.statusText\n      );\n    } else {\n      console.error('Network error or backend unreachable');\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n/* ------------------------------------------------------------------\n   Typed API helpers\n   ------------------------------------------------------------------ */\nexport const authAPI = {\n  login:      (credentials)   => api.post('/auth/login', credentials),\n  register:   (userData)     => api.post('/auth/register', userData),\n  getProfile: ()             => api.get('/auth/profile')\n};\n\nexport const productsAPI = {\n  getProducts:        (params = {})           => api.get('/products', { params }),\n  getProduct:         (id)                    => api.get(`/products/${id}`),\n  getFeaturedProducts:()                      => api.get('/products/featured/top'),\n  createProduct:      (productData)           => api.post('/products', productData),\n  updateProduct:      (id, productData)       => api.put(`/products/${id}`, productData),\n  deleteProduct:      (id)                    => api.delete(`/products/${id}`)\n};\n\nexport const cartAPI = {\n  getCart:          ()                 => api.get('/cart'),\n  addToCart:        (cartData)         => api.post('/cart', cartData),\n  updateCartItem:   (itemId, data)     => api.put(`/cart/${itemId}`, data),\n  removeFromCart:   (itemId)           => api.delete(`/cart/${itemId}`)\n};\n\nexport const ordersAPI = {\n  createOrder:     (orderData)         => api.post('/orders', orderData),\n  getOrder:        (id)                => api.get(`/orders/${id}`),\n  getMyOrders:     ()                  => api.get('/orders/user/myorders'),\n  getAllOrders:    ()                  => api.get('/orders'),\n  updateOrderToPaid:(id, paymentResult)=> api.put(`/orders/${id}/pay`, paymentResult)\n};\n\nexport const paymentAPI = {\n  createOrder:   (orderData)   => api.post('/payment/create-order', orderData),\n  verifyPayment: (paymentData) => api.post('/payment/verify-payment', paymentData)\n};\n\nexport const healthAPI = {\n  check: () => api.get('/health')\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}